<div class="wrapper">
  <div class="row">
    <div class="col-md-7 image-event"  style="background-image: url('<%= cl_image_path(@event.photo) %>'); background-size: cover">
      &nbsp;
    </div>
    <div class="col-md-5">
      <div class="header-event">
        <p class="date-event"> <%= @event.date.strftime("%d %B") %> </p>
        <h1><span><%= @event.name %></span></h1>
        <p class="event-category"><span> <%= @event.category %></span> </p>
      </div>
    </div>
  </div>
</div>

<div class="wrapper">

<div class="container container-margin-top">
  <div class="flex-desc">
    <div class="event-desc">
      <h4>ABOUT</h4>
      <p><%= @event.description %></p>
      <p>You’ve probably seen a streamlined, amped version of Shakespeare before, but the gimmick here is that at each performance, one actor begins by consuming enough shots to trip even the best-trained tongue. At Wednesday’s show it was Caitlin Morris, who played Lady Macbeth and one of the witches. The show’s alcoholic content also gives a certain license to the onlookers, who become participants in the festivities. Two audience members in particular are involved, having paid extra for the privilege of sitting on thrones, where they are given champagne, caviar and the right to order the designated drinker to drink even more shots.</p>
      <%= link_to 'Go back', events_path(search: session[:search_query]), class: 'link-back' %>
    </div>
      <div class="box-event">
        <div class="price">
          <p>Price</p>
          <p> <%= @event.price %> € </p>
        </div>
        <div class="form-group">
          <%= link_to 'Book now', new_event_booking_path(@event), class: "btn btn-danger btn-block event-input" %>
        </div>
      </div>
    </div>
  </div>
</div>
<div id="map" style="width: 100%; height: 600px;"></div>

</div>

<!-- javascript -->
<% content_for(:after_js) do %>
<%= javascript_tag do %>
var styles = [{
"featureType": "water",
"elementType": "geometry",
"stylers": [
{
  "color": "#e9e9e9"
},
{
  "lightness": 17
}
]
},
{
  "featureType": "landscape",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f5f5f5"
  },
  {
    "lightness": 20
  }
  ]
},
{
  "featureType": "road.highway",
  "elementType": "geometry.fill",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 17
  }
  ]
},
{
  "featureType": "road.highway",
  "elementType": "geometry.stroke",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 29
  },
  {
    "weight": 0.2
  }
  ]
},
{
  "featureType": "road.arterial",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 18
  }
  ]
},
{
  "featureType": "road.local",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 16
  }
  ]
},
{
  "featureType": "poi",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f5f5f5"
  },
  {
    "lightness": 21
  }
  ]
},
{
  "featureType": "poi.park",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#dedede"
  },
  {
    "lightness": 21
  }
  ]
},
{
  "elementType": "labels.text.stroke",
  "stylers": [
  {
    "visibility": "on"
  },
  {
    "color": "#ffffff"
  },
  {
    "lightness": 16
  }
  ]
},
{
  "elementType": "labels.text.fill",
  "stylers": [
  {
    "saturation": 36
  },
  {
    "color": "#333333"
  },
  {
    "lightness": 40
  }
  ]
},
{
  "elementType": "labels.icon",
  "stylers": [
  {
    "visibility": "off"
  }
  ]
},
{
  "featureType": "transit",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f2f2f2"
  },
  {
    "lightness": 19
  }
  ]
},
{
  "featureType": "administrative",
  "elementType": "geometry.fill",
  "stylers": [
  {
    "color": "#fefefe"
  },
  {
    "lightness": 20
  }
  ]
},
{
  "featureType": "administrative",
  "elementType": "geometry.stroke",
  "stylers": [
  {
    "color": "#fefefe"
  },
  {
    "lightness": 17
  },
  {
    "weight": 1.2
  }
  ]
}];
var handler = Gmaps.build('Google');
handler.buildMap({ provider: {styles: styles},
internal: { id: 'map' } }, function() {
markers = handler.addMarkers(<%= raw @hash.to_json %>);
handler.bounds.extendWith(markers);
handler.fitMapToBounds();
if (markers.length == 0) {
handler.getMap().setZoom(2);
} else if (markers.length == 1) {
handler.getMap().setZoom(14);
}
});
<% end %>
<% end %>
