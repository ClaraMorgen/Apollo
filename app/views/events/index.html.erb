<div class="wrapper wrapper-search">
  <!-- Page container -->
  <div class="container container-search">

    <!-- Search bar -->
    <div class="search-form-bar">
      <div class="form-fields">
        <%= simple_form_for :search, url: events_path, html: {method: "GET", :class => 'form-inline form-prevent-submit'} do |f| %>
        <%= f.input :city, placeholder: "  City", label: false, class: "input-form form-control", input_html: { value: @query[:city], style: "width: 140px;" } %>
        <%= f.input :category, collection: Event::CATEGORY, label: false, class: "input-form form-control", prompt: " Category ", selected: @query[:category]%>
        <%= f.input :date, as: :string, input_html: { class: 'datepicker form-control', value: @query[:date], style: "width: 140px;" }, label: false, placeholder: "  Date" %>

        <div id="price-slider" style="width: 100px; margin: 0; display: inline-block"></div>
        <%= f.input :price,  input_html: { id: "price-display", label: "Maximum Price", value: 25, min: 5, max: 50, readonly: true, style: "background: transparent; border: none;
          box-shadow: none; width: 70px; margin-left: 0;" }, class: "input-form form-control" %>

        <%#= f.input :english, as: :radio_buttons, prompt: "English", class: "input-form form-control" %>

          <%= f.input :tags,  prompt: "Tags", label: false, class: "input-form form-control", collection: Event::TAG %>

          <%= f.button :submit, class: "btn btn-danger", value: "Search" %>
          <% end %>
        </div>
      </div>


      <!-- Card container -->
      <div class="cards">
        <% @events.each do |event| %>
        <div class='event-card'>
          <%= link_to "", event_path(event) %>
          <div class="img-card" style="background-image: url('<%= cl_image_path(event.photo) %>');"></div>
          <div class="info">
            <div class="event-name-price">
              <h3><span><%= event.name %></span></h3>
              <p> <%= event.price %> € </p>
            </div>
            <p class="event-date"><%= event.date.day %> / <%= event.date.month %> / <%= event.date.year %> - <%= event.venue.name %></p>
            <p class="desc"><%= event.description.split.slice(0, 5).join(" ") %></p>
          </div>
        </div>
        <% end %>
      </div>
    </div>
    <!-- Map container -->
    <div id="map-search" ></div>
  </div>

  <!-- javascript -->
  <% content_for(:after_js) do %>

  <%= javascript_tag do %>

  $( function() {
  console.log("hello!");
  $( "#price-slider" ).slider({
  range: "min",
  value: parseInt(<%= @query[:price].try(:gsub, " €", "") || 60 %>),
  min: 0,
  max: 60,
  slide: function(event, ui) {
  $( "#price-display").val( ui.value + " €");
}
});
$( "#price-display" ).val( $( "#price-slider" ).slider( "value" ) + " €");
} );
<% end %>

<%= javascript_tag do %>
var styles = [{
"featureType": "water",
"elementType": "geometry",
"stylers": [
{
  "color": "#e9e9e9"
},
{
  "lightness": 17
}
]
},
{
  "featureType": "landscape",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f5f5f5"
  },
  {
    "lightness": 20
  }
  ]
},
{
  "featureType": "road.highway",
  "elementType": "geometry.fill",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 17
  }
  ]
},
{
  "featureType": "road.highway",
  "elementType": "geometry.stroke",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 29
  },
  {
    "weight": 0.2
  }
  ]
},
{
  "featureType": "road.arterial",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 18
  }
  ]
},
{
  "featureType": "road.local",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#ffffff"
  },
  {
    "lightness": 16
  }
  ]
},
{
  "featureType": "poi",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f5f5f5"
  },
  {
    "lightness": 21
  }
  ]
},
{
  "featureType": "poi.park",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#dedede"
  },
  {
    "lightness": 21
  }
  ]
},
{
  "elementType": "labels.text.stroke",
  "stylers": [
  {
    "visibility": "on"
  },
  {
    "color": "#ffffff"
  },
  {
    "lightness": 16
  }
  ]
},
{
  "elementType": "labels.text.fill",
  "stylers": [
  {
    "saturation": 36
  },
  {
    "color": "#333333"
  },
  {
    "lightness": 40
  }
  ]
},
{
  "elementType": "labels.icon",
  "stylers": [
  {
    "visibility": "off"
  }
  ]
},
{
  "featureType": "transit",
  "elementType": "geometry",
  "stylers": [
  {
    "color": "#f2f2f2"
  },
  {
    "lightness": 19
  }
  ]
},
{
  "featureType": "administrative",
  "elementType": "geometry.fill",
  "stylers": [
  {
    "color": "#fefefe"
  },
  {
    "lightness": 20
  }
  ]
},
{
  "featureType": "administrative",
  "elementType": "geometry.stroke",
  "stylers": [
  {
    "color": "#fefefe"
  },
  {
    "lightness": 17
  },
  {
    "weight": 1.2
  }
  ]
}];


var handler = Gmaps.build('Google', { markers: { clusterer: null } });

handler.buildMap({ provider: {styles: styles}, internal: { id: 'map-search' } }, function() {

markers = (<%= raw @hash.to_json %>)
console.log(markers)

Gmaps.store = {}
Gmaps.store.markers = markers.map(function(m) {
  marker = handler.addMarker(m);
  marker.serviceObject.set('id', m.id);
  return marker;
});
handler.bounds.extendWith(Gmaps.store.markers);
handler.fitMapToBounds();
});




<% end %>
<% end %>
